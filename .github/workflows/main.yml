name: Video Transcode Workflow
on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  setup-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      hash: ${{ steps.download.outputs.hash }}
      valid: ${{ steps.download.outputs.valid }}
      cache_version: ${{ steps.download.outputs.cache_version }}

    steps:
      - name: Setup Dependencies
        run: |
          pip3 install xdcc-dl pika
          
      - uses: actions/cache@v2
        name: Fetch ffmpeg
        id: fetch-ffmpeg
        with:
          path: './ffmpeg'
          key: 'ffmpeg'
          
      - name: Cache ffmpeg
        if: steps.fetch-ffmpeg.outputs.cache-hit != 'true'
        run: |
          url=`
              curl -s https://api.github.com/repos/BtbN/FFmpeg-Builds/releases/latest \
              | grep "linux64-gpl.tar.xz" \
              | cut -d : -f 2,3 \
              | cut -d , -f 2 \
              | tr -d \" 
          `
          wget -O ffmpeg.tar.xz $url 
          tar -xvf ffmpeg.tar.xz
          mv ffmpeg-* ffmpeg

      - name: Download Video
        id: download
        env:
          RABBITMQ_URL: ${{ secrets.RABBITMQ_URL }}
        shell: python
        run: |
          import os
          import sys
          import json
          import pika
          import hashlib
          from xdcc_dl.xdcc import download_packs
          from xdcc_dl.entities import XDCCPack, IrcServer

          CACHE_VERSION = "v4"

          params = pika.URLParameters(os.environ['RABBITMQ_URL'])
          connection = pika.BlockingConnection(params)

          channel = connection.channel()
          channel.queue_declare(queue='dl')

          method_frame, header_frame, body = channel.basic_get('dl')

          if body is not None:
              print(" [x] Received %r" % body.decode())
              data = json.loads(body.decode())
              print(" [x] Validating Pack ")
              pack = XDCCPack(IrcServer("irc.rizon.net"), data["bot"], data["pack"])
              # Validate pack
              print(pack)
              print(" [x] Success! Sending Acknowledgement ")
              channel.basic_ack(method_frame.delivery_tag)
              print(" [x] Downloading... ")
              pack.set_filename("output", True)
              download_packs([pack])
              print(" [x] Download Done ")
              print(" [x] Done ")
              filename = "output.mkv"
              with open(filename,"rb") as f:
                  bytes = f.read() 
                  readable_hash = hashlib.sha256(bytes).hexdigest();
                  print(readable_hash)

              print("::set-output name=hash::" + readable_hash)
              print("::set-output name=valid::true")
          else:
              print("No message received")
              print("::set-output name=valid::false")
          
          print("::set-output name=cache_version::" + CACHE_VERSION)

      - name: Segment Video
        if: ${{ steps.download.outputs.valid == 'true' }}
        run: |
          mkdir ./pre
          DURATION=$(./ffmpeg/bin/ffprobe -i output.mkv -show_format -v quiet | sed -n 's/duration=//p')
          SEGMENT_SIZE=$(bc <<< "scale=0; $DURATION / 128.0")

          echo "Duration: $DURATION"
          echo "Size: $SEGMENT_SIZE"

          ./ffmpeg/bin/ffmpeg -i output.mkv -map 0\
              -vcodec copy -f segment -segment_time $SEGMENT_SIZE \
              ./pre/pre_%03d.mkv

      - name: Setup Matrix
        id: set-matrix
        if: ${{ steps.download.outputs.valid == 'true' }}
        shell: python
        run: |
          from os import listdir
          from os.path import isfile, join
          import json

          path = './pre'
          files = [f for f in listdir(path) if isfile(join(path, f))]
          segments = { 'segments': files }

          print("::set-output name=matrix::" + json.dumps(segments))

      - name: Upload to Cache
        if: ${{ steps.download.outputs.valid == 'true' }}
        uses: actions/cache@v2
        with:
          path: |
            ./pre
          key: ${{ steps.download.outputs.hash }}-${{ steps.download.outputs.cache_version }}


  check-matrix:
    if: ${{ needs.setup-matrix.outputs.valid == 'true' }}
    runs-on: ubuntu-latest
    needs: setup-matrix
    steps:
      - name: Install json2yaml
        run: |
          sudo npm install -g json2yaml
      
      - name: Check Hash
        run: |
          hash='${{ needs.setup-matrix.outputs.hash }}'
          echo $hash

      - name: Check matrix definition
        run: |
          matrix='${{ needs.setup-matrix.outputs.matrix }}'
          echo $matrix
          echo $matrix | jq .
          echo $matrix | json2yaml
          
      - uses: actions/cache@v2
        name: Fetch Cache
        id: fetch-cache
        with:
          path: './pre'
          key: ${{ needs.setup-matrix.outputs.hash }}-${{ needs.setup-matrix.outputs.cache_version }}

      - name: Check Cache
        if: steps.fetch-cache.outputs.cache-hit == 'true'
        shell: python
        run: |
          from os import listdir
          from os.path import isfile, join
          import json

          path = './pre'
          files = [f for f in listdir(path) if isfile(join(path, f))]
          segments = { 'segments': files }
          print(segments)
          
  transcode-video:
    runs-on: ubuntu-latest
    needs: setup-matrix
    if: ${{ needs.setup-matrix.outputs.valid == 'true' }}

    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.setup-matrix.outputs.matrix)}}
      
    steps:
      - uses: actions/cache@v2
        name: Fetch ffmpeg
        id: fetch-ffmpeg
        with:
          path: './ffmpeg'
          key: 'ffmpeg'
          
      - name: Cache ffmpeg
        if: steps.fetch-ffmpeg.outputs.cache-hit != 'true'
        run: |
          url=`
              curl -s https://api.github.com/repos/BtbN/FFmpeg-Builds/releases/latest \
              | grep "linux64-gpl.tar.xz" \
              | cut -d : -f 2,3 \
              | cut -d , -f 2 \
              | tr -d \" 
          `
          wget -O ffmpeg.tar.xz $url 
          tar -xvf ffmpeg.tar.xz
          mv ffmpeg-* ffmpeg
          
      - uses: actions/cache@v2
        name: Fetch video from cache
        with:
          path: './pre'
          key: ${{ needs.setup-matrix.outputs.hash }}-${{ needs.setup-matrix.outputs.cache_version }}
      
      - name: Transcode Segment
        run: |
          echo "Segment Name: ${{ matrix.segments }}"
          VIDEO_IN=./pre/${{ matrix.segments }}
          VIDEO_OUT=./out/`echo "$VIDEO_IN" | sed -r "s/.+\/(.+)\..+/\1/"`.mkv

          mkdir ./out

          docker run --privileged -v "$(pwd):/videos" --user $(id -u):$(id -g) -t --rm masterofzen/av1an:latest \
          -i "$VIDEO_IN"  -e svt-av1 -v " --preset 2 --keyint 240 --rc 0 --crf 0 " \
          --target-quality 95 --pix-format yuv420p10le -l "log.log" -o "$VIDEO_OUT"

      - uses: actions/cache@v2
        name: Push out video to cache
        id: fetch-cache
        with:
          path: './out'
          key: ${{ needs.setup-matrix.outputs.hash }}-${{ needs.setup-matrix.outputs.cache_version }}-out-${{ matrix.segments }}
          
  reconstruct-video:
    runs-on: ubuntu-latest
    needs: 
    - transcode-video
    - setup-matrix

    steps:
      - uses: actions/cache@v2
        name: Fetch ffmpeg
        id: fetch-ffmpeg
        with:
          path: './ffmpeg'
          key: 'ffmpeg'
          
      - name: Cache ffmpeg
        if: steps.fetch-ffmpeg.outputs.cache-hit != 'true'
        run: |
          url=`
              curl -s https://api.github.com/repos/BtbN/FFmpeg-Builds/releases/latest \
              | grep "linux64-gpl.tar.xz" \
              | cut -d : -f 2,3 \
              | cut -d , -f 2 \
              | tr -d \" 
          `
          wget -O ffmpeg.tar.xz $url 
          tar -xvf ffmpeg.tar.xz
          mv ffmpeg-* ffmpeg
          
      - uses: actions/cache@v2
        name: Pull out video from cache
        id: fetch-cache
        with:
          path: './out'
          key: ${{ needs.setup-matrix.outputs.hash }}-${{ needs.setup-matrix.outputs.cache_version }}-out-xxx
          restore-keys: |
            ${{ needs.setup-matrix.outputs.hash }}-${{ needs.setup-matrix.outputs.cache_version }}-out-
      
      - name: Join Segments
        run: |
          for f in `ls ./out/*.mkv | sort -n`
            do echo "file '$f'" >> mylist.txt 
          done
          cat mylist.txt  
          ./ffmpeg/bin/ffmpeg -f concat -safe 0 -i mylist.txt -c copy output-re.mkv
          
      - name: Generate DASH Playlist
        run: |
          VIDEO_IN=output-re.mkv
          V_SIZE_1=640x360
          V_SIZE_2=768x432
          V_SIZE_3=1280x720
          V_SIZE_4=1920x1080

          mkdir tsout
          touch ./tsout/master.mpd

          ./ffmpeg/bin/ffmpeg -i $VIDEO_IN -y -c:v copy \
              -map v:0 -s:0 $V_SIZE_1  \
              -map v:0 -s:1 $V_SIZE_2  \
              -map v:0 -s:2 $V_SIZE_3  \
              -map v:0 -s:3 $V_SIZE_4  \
              -map 0:a \
              -init_seg_name init\$RepresentationID\$.\$ext\$ -media_seg_name chunk\$RepresentationID\$-\$Number%05d\$.\$ext\$ \
              -use_template 1 -use_timeline 1  \
              -seg_duration 4 -adaptation_sets "id=0,streams=v id=1,streams=a" \
              -f dash tsout/master.mpd

      - name: Upload to Web3
        run: |
          touch index.mjs
          cat >./index.mjs <<'EOL'
          import { Web3Storage, getFilesFromPath } from 'web3.storage'

          const apiToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweDYwMUY3Q2U2NjYyNzY1NUMyZTA0MUNkMjlhY0EwQThiNTIwMGZFNjAiLCJpc3MiOiJ3ZWIzLXN0b3JhZ2UiLCJpYXQiOjE2MzgwMDg2MTU2NjIsIm5hbWUiOiJ5dWtpLXRlc3QifQ.4j-EN3A9KxUgmt7aDgMX-ehaFLtA6D4mYofVA3CUenU'
          const client = new Web3Storage({ token: apiToken })

          async function getFiles(path) {
          const files = await getFilesFromPath(path)
          console.log(`read ${files.length} file(s) from ${path}`)
          return files
          }

          console.log("Uploading files")
          let count = 0
          const rootCid = await client.put(await getFiles('./tsout'),
          {
              name: "${{ needs.transcode-video.needs.setup-matrix.outputs.hash }}", maxRetries: 3, onStoredChunk: (chunk) => {
              count += chunk
              console.log(`Uploaded ${count/1024/1024} MB`)
              }
          })
          console.log(`Complete. Root CID: ${rootCid}`)
          console.log(`Total size: ${Math.round(count/1024/1024)} MB`)
          console.log(`URL: https://${rootCid}.ipfs.dweb.link/tsout/master.mpd`)
          EOL

          node index.mjs
          


